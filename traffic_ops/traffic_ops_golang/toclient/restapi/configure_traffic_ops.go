// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	graceful "github.com/tylerb/graceful"

	"github.com/apache/incubator-trafficcontrol.tor-api/traffic_ops/traffic_ops_golang/toclient/restapi/operations"
	"github.com/apache/incubator-trafficcontrol.tor-api/traffic_ops/traffic_ops_golang/toclient/restapi/operations/asn"
	"github.com/apache/incubator-trafficcontrol.tor-api/traffic_ops/traffic_ops_golang/toclient/restapi/operations/cdn"
	"github.com/apache/incubator-trafficcontrol.tor-api/traffic_ops/traffic_ops_golang/toclient/restapi/operations/division"
	"github.com/apache/incubator-trafficcontrol.tor-api/traffic_ops/traffic_ops_golang/toclient/restapi/operations/region"
	"github.com/apache/incubator-trafficcontrol.tor-api/traffic_ops/traffic_ops_golang/toclient/restapi/operations/status"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target .. --name  --spec ../../docs/swagger.json

func configureFlags(api *operations.TrafficOpsAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *operations.TrafficOpsAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	// Applies when the "cookie" header is set
	api.CookieAuth = func(token string) (interface{}, error) {
		return nil, errors.NotImplemented("api key auth (Cookie) cookie from header param [cookie] has not yet been implemented")
	}

	// Set your custom authorizer if needed. Default one is security.Authorized()
	// Expected interface runtime.Authorizer
	//
	// Example:
	// api.APIAuthorizer = security.Authorized()

	api.AsnDeleteASNHandler = asn.DeleteASNHandlerFunc(func(params asn.DeleteASNParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation asn.DeleteASN has not yet been implemented")
	})
	api.CdnDeleteCDNHandler = cdn.DeleteCDNHandlerFunc(func(params cdn.DeleteCDNParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation cdn.DeleteCDN has not yet been implemented")
	})
	api.DivisionDeleteDivisionHandler = division.DeleteDivisionHandlerFunc(func(params division.DeleteDivisionParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation division.DeleteDivision has not yet been implemented")
	})
	api.RegionDeleteRegionHandler = region.DeleteRegionHandlerFunc(func(params region.DeleteRegionParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation region.DeleteRegion has not yet been implemented")
	})
	api.StatusDeleteStatusHandler = status.DeleteStatusHandlerFunc(func(params status.DeleteStatusParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation status.DeleteStatus has not yet been implemented")
	})
	api.AsnGetASNByIDHandler = asn.GetASNByIDHandlerFunc(func(params asn.GetASNByIDParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation asn.GetASNByID has not yet been implemented")
	})
	api.AsnGetASNsHandler = asn.GetASNsHandlerFunc(func(params asn.GetASNsParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation asn.GetASNs has not yet been implemented")
	})
	api.CdnGetCDNByIDHandler = cdn.GetCDNByIDHandlerFunc(func(params cdn.GetCDNByIDParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation cdn.GetCDNByID has not yet been implemented")
	})
	api.CdnGetCDNsHandler = cdn.GetCDNsHandlerFunc(func(params cdn.GetCDNsParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation cdn.GetCDNs has not yet been implemented")
	})
	api.DivisionGetDivisionByIDHandler = division.GetDivisionByIDHandlerFunc(func(params division.GetDivisionByIDParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation division.GetDivisionByID has not yet been implemented")
	})
	api.DivisionGetDivisionsHandler = division.GetDivisionsHandlerFunc(func(params division.GetDivisionsParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation division.GetDivisions has not yet been implemented")
	})
	api.RegionGetRegionByIDHandler = region.GetRegionByIDHandlerFunc(func(params region.GetRegionByIDParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation region.GetRegionByID has not yet been implemented")
	})
	api.RegionGetRegionsHandler = region.GetRegionsHandlerFunc(func(params region.GetRegionsParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation region.GetRegions has not yet been implemented")
	})
	api.StatusGetStatusByIDHandler = status.GetStatusByIDHandlerFunc(func(params status.GetStatusByIDParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation status.GetStatusByID has not yet been implemented")
	})
	api.StatusGetStatusesHandler = status.GetStatusesHandlerFunc(func(params status.GetStatusesParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation status.GetStatuses has not yet been implemented")
	})
	api.AsnPostASNHandler = asn.PostASNHandlerFunc(func(params asn.PostASNParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation asn.PostASN has not yet been implemented")
	})
	api.CdnPostCDNHandler = cdn.PostCDNHandlerFunc(func(params cdn.PostCDNParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation cdn.PostCDN has not yet been implemented")
	})
	api.DivisionPostDivisionHandler = division.PostDivisionHandlerFunc(func(params division.PostDivisionParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation division.PostDivision has not yet been implemented")
	})
	api.RegionPostRegionHandler = region.PostRegionHandlerFunc(func(params region.PostRegionParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation region.PostRegion has not yet been implemented")
	})
	api.StatusPostStatusHandler = status.PostStatusHandlerFunc(func(params status.PostStatusParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation status.PostStatus has not yet been implemented")
	})
	api.AsnPutASNHandler = asn.PutASNHandlerFunc(func(params asn.PutASNParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation asn.PutASN has not yet been implemented")
	})
	api.CdnPutCDNHandler = cdn.PutCDNHandlerFunc(func(params cdn.PutCDNParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation cdn.PutCDN has not yet been implemented")
	})
	api.DivisionPutDivisionHandler = division.PutDivisionHandlerFunc(func(params division.PutDivisionParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation division.PutDivision has not yet been implemented")
	})
	api.RegionPutRegionHandler = region.PutRegionHandlerFunc(func(params region.PutRegionParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation region.PutRegion has not yet been implemented")
	})
	api.StatusPutStatusHandler = status.PutStatusHandlerFunc(func(params status.PutStatusParams, principal interface{}) middleware.Responder {
		return middleware.NotImplemented("operation status.PutStatus has not yet been implemented")
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}
