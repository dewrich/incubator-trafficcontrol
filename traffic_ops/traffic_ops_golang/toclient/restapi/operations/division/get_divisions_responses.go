// Code generated by go-swagger; DO NOT EDIT.

package division

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/apache/incubator-trafficcontrol.tor-api/traffic_ops/traffic_ops_golang/toclient/models"
)

// GetDivisionsOKCode is the HTTP code returned for type GetDivisionsOK
const GetDivisionsOKCode int = 200

/*GetDivisionsOK Divisions -  DivisionsResponse to get the "response" top level key

swagger:response getDivisionsOK
*/
type GetDivisionsOK struct {

	/*
	  In: Body
	*/
	Payload *models.DivisionsResponse `json:"body,omitempty"`
}

// NewGetDivisionsOK creates GetDivisionsOK with default headers values
func NewGetDivisionsOK() *GetDivisionsOK {
	return &GetDivisionsOK{}
}

// WithPayload adds the payload to the get divisions o k response
func (o *GetDivisionsOK) WithPayload(payload *models.DivisionsResponse) *GetDivisionsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get divisions o k response
func (o *GetDivisionsOK) SetPayload(payload *models.DivisionsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDivisionsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDivisionsBadRequestCode is the HTTP code returned for type GetDivisionsBadRequest
const GetDivisionsBadRequestCode int = 400

/*GetDivisionsBadRequest Alerts - informs the client of server side messages

swagger:response getDivisionsBadRequest
*/
type GetDivisionsBadRequest struct {

	/*
	  In: Body
	*/
	Payload models.GetDivisionsBadRequestBody `json:"body,omitempty"`
}

// NewGetDivisionsBadRequest creates GetDivisionsBadRequest with default headers values
func NewGetDivisionsBadRequest() *GetDivisionsBadRequest {
	return &GetDivisionsBadRequest{}
}

// WithPayload adds the payload to the get divisions bad request response
func (o *GetDivisionsBadRequest) WithPayload(payload models.GetDivisionsBadRequestBody) *GetDivisionsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get divisions bad request response
func (o *GetDivisionsBadRequest) SetPayload(payload models.GetDivisionsBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDivisionsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if payload == nil {
		payload = make(models.GetDivisionsBadRequestBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
