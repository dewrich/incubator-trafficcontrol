// Code generated by go-swagger; DO NOT EDIT.

package cdn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/apache/incubator-trafficcontrol.tor-api/traffic_ops/traffic_ops_golang/toclient/models"
)

// GetCDNsOKCode is the HTTP code returned for type GetCDNsOK
const GetCDNsOKCode int = 200

/*GetCDNsOK CDNs -  CDNsResponse to get the "response" top level key

swagger:response getCDNsOK
*/
type GetCDNsOK struct {

	/*
	  In: Body
	*/
	Payload *models.CDNsResponse `json:"body,omitempty"`
}

// NewGetCDNsOK creates GetCDNsOK with default headers values
func NewGetCDNsOK() *GetCDNsOK {
	return &GetCDNsOK{}
}

// WithPayload adds the payload to the get c d ns o k response
func (o *GetCDNsOK) WithPayload(payload *models.CDNsResponse) *GetCDNsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get c d ns o k response
func (o *GetCDNsOK) SetPayload(payload *models.CDNsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCDNsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCDNsBadRequestCode is the HTTP code returned for type GetCDNsBadRequest
const GetCDNsBadRequestCode int = 400

/*GetCDNsBadRequest Alerts - informs the client of server side messages

swagger:response getCDNsBadRequest
*/
type GetCDNsBadRequest struct {

	/*
	  In: Body
	*/
	Payload models.GetCDNsBadRequestBody `json:"body,omitempty"`
}

// NewGetCDNsBadRequest creates GetCDNsBadRequest with default headers values
func NewGetCDNsBadRequest() *GetCDNsBadRequest {
	return &GetCDNsBadRequest{}
}

// WithPayload adds the payload to the get c d ns bad request response
func (o *GetCDNsBadRequest) WithPayload(payload models.GetCDNsBadRequestBody) *GetCDNsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get c d ns bad request response
func (o *GetCDNsBadRequest) SetPayload(payload models.GetCDNsBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCDNsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if payload == nil {
		payload = make(models.GetCDNsBadRequestBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
