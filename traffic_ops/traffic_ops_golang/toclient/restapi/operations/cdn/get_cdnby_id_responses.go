// Code generated by go-swagger; DO NOT EDIT.

package cdn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/apache/incubator-trafficcontrol.tor-api/traffic_ops/traffic_ops_golang/toclient/models"
)

// GetCDNByIDOKCode is the HTTP code returned for type GetCDNByIDOK
const GetCDNByIDOKCode int = 200

/*GetCDNByIDOK CDNs -  CDNsResponse to get the "response" top level key

swagger:response getCDNByIdOK
*/
type GetCDNByIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.CDNsResponse `json:"body,omitempty"`
}

// NewGetCDNByIDOK creates GetCDNByIDOK with default headers values
func NewGetCDNByIDOK() *GetCDNByIDOK {
	return &GetCDNByIDOK{}
}

// WithPayload adds the payload to the get c d n by Id o k response
func (o *GetCDNByIDOK) WithPayload(payload *models.CDNsResponse) *GetCDNByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get c d n by Id o k response
func (o *GetCDNByIDOK) SetPayload(payload *models.CDNsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCDNByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCDNByIDBadRequestCode is the HTTP code returned for type GetCDNByIDBadRequest
const GetCDNByIDBadRequestCode int = 400

/*GetCDNByIDBadRequest Alerts - informs the client of server side messages

swagger:response getCDNByIdBadRequest
*/
type GetCDNByIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload models.GetCDNByIDBadRequestBody `json:"body,omitempty"`
}

// NewGetCDNByIDBadRequest creates GetCDNByIDBadRequest with default headers values
func NewGetCDNByIDBadRequest() *GetCDNByIDBadRequest {
	return &GetCDNByIDBadRequest{}
}

// WithPayload adds the payload to the get c d n by Id bad request response
func (o *GetCDNByIDBadRequest) WithPayload(payload models.GetCDNByIDBadRequestBody) *GetCDNByIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get c d n by Id bad request response
func (o *GetCDNByIDBadRequest) SetPayload(payload models.GetCDNByIDBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCDNByIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if payload == nil {
		payload = make(models.GetCDNByIDBadRequestBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
