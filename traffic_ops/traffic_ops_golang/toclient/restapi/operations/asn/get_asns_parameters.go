// Code generated by go-swagger; DO NOT EDIT.

package asn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetASNsParams creates a new GetASNsParams object
// with the default values initialized.
func NewGetASNsParams() GetASNsParams {
	var ()
	return GetASNsParams{}
}

// GetASNsParams contains all the bound params for the get a s ns operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetASNs
type GetASNsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Related cachegroup name
	  In: query
	*/
	Cachegroup *string
	/*Related cachegroup id
	  In: query
	*/
	CachegroupID *string
	/*Unique identifier for the CDN
	  In: query
	*/
	ID *string
	/*
	  In: query
	*/
	Orderby *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetASNsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCachegroup, qhkCachegroup, _ := qs.GetOK("cachegroup")
	if err := o.bindCachegroup(qCachegroup, qhkCachegroup, route.Formats); err != nil {
		res = append(res, err)
	}

	qCachegroupID, qhkCachegroupID, _ := qs.GetOK("cachegroupId")
	if err := o.bindCachegroupID(qCachegroupID, qhkCachegroupID, route.Formats); err != nil {
		res = append(res, err)
	}

	qID, qhkID, _ := qs.GetOK("id")
	if err := o.bindID(qID, qhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrderby, qhkOrderby, _ := qs.GetOK("orderby")
	if err := o.bindOrderby(qOrderby, qhkOrderby, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetASNsParams) bindCachegroup(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Cachegroup = &raw

	return nil
}

func (o *GetASNsParams) bindCachegroupID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.CachegroupID = &raw

	return nil
}

func (o *GetASNsParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ID = &raw

	return nil
}

func (o *GetASNsParams) bindOrderby(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Orderby = &raw

	return nil
}
