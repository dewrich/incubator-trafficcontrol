// Code generated by go-swagger; DO NOT EDIT.

package asn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/apache/incubator-trafficcontrol.tor-api/traffic_ops/traffic_ops_golang/toclient/models"
)

// GetASNByIDOKCode is the HTTP code returned for type GetASNByIDOK
const GetASNByIDOKCode int = 200

/*GetASNByIDOK ASNs -  ASNsResponse to get the "response" top level key

swagger:response getASNByIdOK
*/
type GetASNByIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.ASNsResponse `json:"body,omitempty"`
}

// NewGetASNByIDOK creates GetASNByIDOK with default headers values
func NewGetASNByIDOK() *GetASNByIDOK {
	return &GetASNByIDOK{}
}

// WithPayload adds the payload to the get a s n by Id o k response
func (o *GetASNByIDOK) WithPayload(payload *models.ASNsResponse) *GetASNByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get a s n by Id o k response
func (o *GetASNByIDOK) SetPayload(payload *models.ASNsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetASNByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetASNByIDBadRequestCode is the HTTP code returned for type GetASNByIDBadRequest
const GetASNByIDBadRequestCode int = 400

/*GetASNByIDBadRequest Alerts - informs the client of server side messages

swagger:response getASNByIdBadRequest
*/
type GetASNByIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload models.GetASNByIDBadRequestBody `json:"body,omitempty"`
}

// NewGetASNByIDBadRequest creates GetASNByIDBadRequest with default headers values
func NewGetASNByIDBadRequest() *GetASNByIDBadRequest {
	return &GetASNByIDBadRequest{}
}

// WithPayload adds the payload to the get a s n by Id bad request response
func (o *GetASNByIDBadRequest) WithPayload(payload models.GetASNByIDBadRequestBody) *GetASNByIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get a s n by Id bad request response
func (o *GetASNByIDBadRequest) SetPayload(payload models.GetASNByIDBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetASNByIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if payload == nil {
		payload = make(models.GetASNByIDBadRequestBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
