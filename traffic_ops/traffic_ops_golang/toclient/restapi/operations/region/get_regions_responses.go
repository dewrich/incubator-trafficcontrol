// Code generated by go-swagger; DO NOT EDIT.

package region

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/apache/incubator-trafficcontrol.tor-api/traffic_ops/traffic_ops_golang/toclient/models"
)

// GetRegionsOKCode is the HTTP code returned for type GetRegionsOK
const GetRegionsOKCode int = 200

/*GetRegionsOK Regions -  RegionsResponse to get the "response" top level key

swagger:response getRegionsOK
*/
type GetRegionsOK struct {

	/*
	  In: Body
	*/
	Payload *models.RegionsResponse `json:"body,omitempty"`
}

// NewGetRegionsOK creates GetRegionsOK with default headers values
func NewGetRegionsOK() *GetRegionsOK {
	return &GetRegionsOK{}
}

// WithPayload adds the payload to the get regions o k response
func (o *GetRegionsOK) WithPayload(payload *models.RegionsResponse) *GetRegionsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get regions o k response
func (o *GetRegionsOK) SetPayload(payload *models.RegionsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRegionsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRegionsBadRequestCode is the HTTP code returned for type GetRegionsBadRequest
const GetRegionsBadRequestCode int = 400

/*GetRegionsBadRequest Alerts - informs the client of server side messages

swagger:response getRegionsBadRequest
*/
type GetRegionsBadRequest struct {

	/*
	  In: Body
	*/
	Payload models.GetRegionsBadRequestBody `json:"body,omitempty"`
}

// NewGetRegionsBadRequest creates GetRegionsBadRequest with default headers values
func NewGetRegionsBadRequest() *GetRegionsBadRequest {
	return &GetRegionsBadRequest{}
}

// WithPayload adds the payload to the get regions bad request response
func (o *GetRegionsBadRequest) WithPayload(payload models.GetRegionsBadRequestBody) *GetRegionsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get regions bad request response
func (o *GetRegionsBadRequest) SetPayload(payload models.GetRegionsBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRegionsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if payload == nil {
		payload = make(models.GetRegionsBadRequestBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
