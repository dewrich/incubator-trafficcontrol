// Code generated by go-swagger; DO NOT EDIT.

package status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetStatusesParams creates a new GetStatusesParams object
// with the default values initialized.
func NewGetStatusesParams() GetStatusesParams {
	var ()
	return GetStatusesParams{}
}

// GetStatusesParams contains all the bound params for the get statuses operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetStatuses
type GetStatusesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*A short description of the status
	  In: query
	*/
	Description *string
	/*Unique identifier for the Status
	  In: query
	*/
	ID *string
	/*The name that refers to this Status
	  In: query
	*/
	Name *string
	/*
	  In: query
	*/
	Orderby *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetStatusesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDescription, qhkDescription, _ := qs.GetOK("description")
	if err := o.bindDescription(qDescription, qhkDescription, route.Formats); err != nil {
		res = append(res, err)
	}

	qID, qhkID, _ := qs.GetOK("id")
	if err := o.bindID(qID, qhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qName, qhkName, _ := qs.GetOK("name")
	if err := o.bindName(qName, qhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrderby, qhkOrderby, _ := qs.GetOK("orderby")
	if err := o.bindOrderby(qOrderby, qhkOrderby, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetStatusesParams) bindDescription(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Description = &raw

	return nil
}

func (o *GetStatusesParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ID = &raw

	return nil
}

func (o *GetStatusesParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Name = &raw

	return nil
}

func (o *GetStatusesParams) bindOrderby(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Orderby = &raw

	return nil
}
