// Code generated by go-swagger; DO NOT EDIT.

package status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/apache/incubator-trafficcontrol.tor-api/traffic_ops/traffic_ops_golang/toclient/models"
)

// GetStatusByIDOKCode is the HTTP code returned for type GetStatusByIDOK
const GetStatusByIDOKCode int = 200

/*GetStatusByIDOK Statuses -  StatusesResponse to get the "response" top level key

swagger:response getStatusByIdOK
*/
type GetStatusByIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.StatusesResponse `json:"body,omitempty"`
}

// NewGetStatusByIDOK creates GetStatusByIDOK with default headers values
func NewGetStatusByIDOK() *GetStatusByIDOK {
	return &GetStatusByIDOK{}
}

// WithPayload adds the payload to the get status by Id o k response
func (o *GetStatusByIDOK) WithPayload(payload *models.StatusesResponse) *GetStatusByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get status by Id o k response
func (o *GetStatusByIDOK) SetPayload(payload *models.StatusesResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetStatusByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetStatusByIDBadRequestCode is the HTTP code returned for type GetStatusByIDBadRequest
const GetStatusByIDBadRequestCode int = 400

/*GetStatusByIDBadRequest Alerts - informs the client of server side messages

swagger:response getStatusByIdBadRequest
*/
type GetStatusByIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload models.GetStatusByIDBadRequestBody `json:"body,omitempty"`
}

// NewGetStatusByIDBadRequest creates GetStatusByIDBadRequest with default headers values
func NewGetStatusByIDBadRequest() *GetStatusByIDBadRequest {
	return &GetStatusByIDBadRequest{}
}

// WithPayload adds the payload to the get status by Id bad request response
func (o *GetStatusByIDBadRequest) WithPayload(payload models.GetStatusByIDBadRequestBody) *GetStatusByIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get status by Id bad request response
func (o *GetStatusByIDBadRequest) SetPayload(payload models.GetStatusByIDBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetStatusByIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if payload == nil {
		payload = make(models.GetStatusByIDBadRequestBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
