// Code generated by go-swagger; DO NOT EDIT.

package status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/apache/incubator-trafficcontrol/traffic_ops/traffic_ops_golang/toclient/models"
)

// GetStatusesReader is a Reader for the GetStatuses structure.
type GetStatusesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStatusesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetStatusesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetStatusesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetStatusesOK creates a GetStatusesOK with default headers values
func NewGetStatusesOK() *GetStatusesOK {
	return &GetStatusesOK{}
}

/*GetStatusesOK handles this case with default header values.

Statuses -  StatusesResponse to get the "response" top level key
*/
type GetStatusesOK struct {
	Payload *models.StatusesResponse
}

func (o *GetStatusesOK) Error() string {
	return fmt.Sprintf("[GET /statuses][%d] getStatusesOK  %+v", 200, o.Payload)
}

func (o *GetStatusesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StatusesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStatusesBadRequest creates a GetStatusesBadRequest with default headers values
func NewGetStatusesBadRequest() *GetStatusesBadRequest {
	return &GetStatusesBadRequest{}
}

/*GetStatusesBadRequest handles this case with default header values.

Alerts - informs the client of server side messages
*/
type GetStatusesBadRequest struct {
	Payload models.GetStatusesBadRequestBody
}

func (o *GetStatusesBadRequest) Error() string {
	return fmt.Sprintf("[GET /statuses][%d] getStatusesBadRequest  %+v", 400, o.Payload)
}

func (o *GetStatusesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
