// Code generated by go-swagger; DO NOT EDIT.

package asn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetASNsParams creates a new GetASNsParams object
// with the default values initialized.
func NewGetASNsParams() *GetASNsParams {
	var ()
	return &GetASNsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetASNsParamsWithTimeout creates a new GetASNsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetASNsParamsWithTimeout(timeout time.Duration) *GetASNsParams {
	var ()
	return &GetASNsParams{

		timeout: timeout,
	}
}

// NewGetASNsParamsWithContext creates a new GetASNsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetASNsParamsWithContext(ctx context.Context) *GetASNsParams {
	var ()
	return &GetASNsParams{

		Context: ctx,
	}
}

// NewGetASNsParamsWithHTTPClient creates a new GetASNsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetASNsParamsWithHTTPClient(client *http.Client) *GetASNsParams {
	var ()
	return &GetASNsParams{
		HTTPClient: client,
	}
}

/*GetASNsParams contains all the parameters to send to the API endpoint
for the get a s ns operation typically these are written to a http.Request
*/
type GetASNsParams struct {

	/*Cachegroup
	  Related cachegroup name

	*/
	Cachegroup *string
	/*CachegroupID
	  Related cachegroup id

	*/
	CachegroupID *string
	/*ID
	  Unique identifier for the CDN

	*/
	ID *string
	/*Orderby*/
	Orderby *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get a s ns params
func (o *GetASNsParams) WithTimeout(timeout time.Duration) *GetASNsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get a s ns params
func (o *GetASNsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get a s ns params
func (o *GetASNsParams) WithContext(ctx context.Context) *GetASNsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get a s ns params
func (o *GetASNsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get a s ns params
func (o *GetASNsParams) WithHTTPClient(client *http.Client) *GetASNsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get a s ns params
func (o *GetASNsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCachegroup adds the cachegroup to the get a s ns params
func (o *GetASNsParams) WithCachegroup(cachegroup *string) *GetASNsParams {
	o.SetCachegroup(cachegroup)
	return o
}

// SetCachegroup adds the cachegroup to the get a s ns params
func (o *GetASNsParams) SetCachegroup(cachegroup *string) {
	o.Cachegroup = cachegroup
}

// WithCachegroupID adds the cachegroupID to the get a s ns params
func (o *GetASNsParams) WithCachegroupID(cachegroupID *string) *GetASNsParams {
	o.SetCachegroupID(cachegroupID)
	return o
}

// SetCachegroupID adds the cachegroupId to the get a s ns params
func (o *GetASNsParams) SetCachegroupID(cachegroupID *string) {
	o.CachegroupID = cachegroupID
}

// WithID adds the id to the get a s ns params
func (o *GetASNsParams) WithID(id *string) *GetASNsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get a s ns params
func (o *GetASNsParams) SetID(id *string) {
	o.ID = id
}

// WithOrderby adds the orderby to the get a s ns params
func (o *GetASNsParams) WithOrderby(orderby *string) *GetASNsParams {
	o.SetOrderby(orderby)
	return o
}

// SetOrderby adds the orderby to the get a s ns params
func (o *GetASNsParams) SetOrderby(orderby *string) {
	o.Orderby = orderby
}

// WriteToRequest writes these params to a swagger request
func (o *GetASNsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cachegroup != nil {

		// query param cachegroup
		var qrCachegroup string
		if o.Cachegroup != nil {
			qrCachegroup = *o.Cachegroup
		}
		qCachegroup := qrCachegroup
		if qCachegroup != "" {
			if err := r.SetQueryParam("cachegroup", qCachegroup); err != nil {
				return err
			}
		}

	}

	if o.CachegroupID != nil {

		// query param cachegroupId
		var qrCachegroupID string
		if o.CachegroupID != nil {
			qrCachegroupID = *o.CachegroupID
		}
		qCachegroupID := qrCachegroupID
		if qCachegroupID != "" {
			if err := r.SetQueryParam("cachegroupId", qCachegroupID); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.Orderby != nil {

		// query param orderby
		var qrOrderby string
		if o.Orderby != nil {
			qrOrderby = *o.Orderby
		}
		qOrderby := qrOrderby
		if qOrderby != "" {
			if err := r.SetQueryParam("orderby", qOrderby); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
