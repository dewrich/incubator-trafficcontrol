// Code generated by go-swagger; DO NOT EDIT.

package asn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new asn API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for asn API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteASN Delete a ASN
*/
func (a *Client) DeleteASN(params *DeleteASNParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteASNOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteASNParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteASN",
		Method:             "DELETE",
		PathPattern:        "/asns/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteASNReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteASNOK), nil

}

/*
GetASNByID Retrieve a specific ASN
*/
func (a *Client) GetASNByID(params *GetASNByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetASNByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetASNByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetASNById",
		Method:             "GET",
		PathPattern:        "/asns/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetASNByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetASNByIDOK), nil

}

/*
GetASNs Retrieve a list of ASNs
*/
func (a *Client) GetASNs(params *GetASNsParams, authInfo runtime.ClientAuthInfoWriter) (*GetASNsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetASNsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetASNs",
		Method:             "GET",
		PathPattern:        "/asns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetASNsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetASNsOK), nil

}

/*
PostASN Create a ASN
*/
func (a *Client) PostASN(params *PostASNParams, authInfo runtime.ClientAuthInfoWriter) (*PostASNOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostASNParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostASN",
		Method:             "POST",
		PathPattern:        "/asns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostASNReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostASNOK), nil

}

/*
PutASN Update a ASN
*/
func (a *Client) PutASN(params *PutASNParams, authInfo runtime.ClientAuthInfoWriter) (*PutASNOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutASNParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutASN",
		Method:             "PUT",
		PathPattern:        "/asns/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutASNReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutASNOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
