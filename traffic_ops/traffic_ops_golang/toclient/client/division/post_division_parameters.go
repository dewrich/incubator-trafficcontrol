// Code generated by go-swagger; DO NOT EDIT.

package division

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/apache/incubator-trafficcontrol/traffic_ops/traffic_ops_golang/toclient/models"
)

// NewPostDivisionParams creates a new PostDivisionParams object
// with the default values initialized.
func NewPostDivisionParams() *PostDivisionParams {
	var ()
	return &PostDivisionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostDivisionParamsWithTimeout creates a new PostDivisionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostDivisionParamsWithTimeout(timeout time.Duration) *PostDivisionParams {
	var ()
	return &PostDivisionParams{

		timeout: timeout,
	}
}

// NewPostDivisionParamsWithContext creates a new PostDivisionParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostDivisionParamsWithContext(ctx context.Context) *PostDivisionParams {
	var ()
	return &PostDivisionParams{

		Context: ctx,
	}
}

// NewPostDivisionParamsWithHTTPClient creates a new PostDivisionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostDivisionParamsWithHTTPClient(client *http.Client) *PostDivisionParams {
	var ()
	return &PostDivisionParams{
		HTTPClient: client,
	}
}

/*PostDivisionParams contains all the parameters to send to the API endpoint
for the post division operation typically these are written to a http.Request
*/
type PostDivisionParams struct {

	/*Division
	  Division Request Body

	*/
	Division *models.Division

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post division params
func (o *PostDivisionParams) WithTimeout(timeout time.Duration) *PostDivisionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post division params
func (o *PostDivisionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post division params
func (o *PostDivisionParams) WithContext(ctx context.Context) *PostDivisionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post division params
func (o *PostDivisionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post division params
func (o *PostDivisionParams) WithHTTPClient(client *http.Client) *PostDivisionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post division params
func (o *PostDivisionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDivision adds the division to the post division params
func (o *PostDivisionParams) WithDivision(division *models.Division) *PostDivisionParams {
	o.SetDivision(division)
	return o
}

// SetDivision adds the division to the post division params
func (o *PostDivisionParams) SetDivision(division *models.Division) {
	o.Division = division
}

// WriteToRequest writes these params to a swagger request
func (o *PostDivisionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Division != nil {
		if err := r.SetBodyParam(o.Division); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
