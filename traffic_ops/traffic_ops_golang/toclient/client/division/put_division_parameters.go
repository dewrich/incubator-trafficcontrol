// Code generated by go-swagger; DO NOT EDIT.

package division

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/apache/incubator-trafficcontrol/traffic_ops/traffic_ops_golang/toclient/models"
)

// NewPutDivisionParams creates a new PutDivisionParams object
// with the default values initialized.
func NewPutDivisionParams() *PutDivisionParams {
	var ()
	return &PutDivisionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutDivisionParamsWithTimeout creates a new PutDivisionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutDivisionParamsWithTimeout(timeout time.Duration) *PutDivisionParams {
	var ()
	return &PutDivisionParams{

		timeout: timeout,
	}
}

// NewPutDivisionParamsWithContext creates a new PutDivisionParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutDivisionParamsWithContext(ctx context.Context) *PutDivisionParams {
	var ()
	return &PutDivisionParams{

		Context: ctx,
	}
}

// NewPutDivisionParamsWithHTTPClient creates a new PutDivisionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutDivisionParamsWithHTTPClient(client *http.Client) *PutDivisionParams {
	var ()
	return &PutDivisionParams{
		HTTPClient: client,
	}
}

/*PutDivisionParams contains all the parameters to send to the API endpoint
for the put division operation typically these are written to a http.Request
*/
type PutDivisionParams struct {

	/*Division
	  Division Request Body

	*/
	Division *models.Division
	/*ID
	  ID

	*/
	ID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put division params
func (o *PutDivisionParams) WithTimeout(timeout time.Duration) *PutDivisionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put division params
func (o *PutDivisionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put division params
func (o *PutDivisionParams) WithContext(ctx context.Context) *PutDivisionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put division params
func (o *PutDivisionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put division params
func (o *PutDivisionParams) WithHTTPClient(client *http.Client) *PutDivisionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put division params
func (o *PutDivisionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDivision adds the division to the put division params
func (o *PutDivisionParams) WithDivision(division *models.Division) *PutDivisionParams {
	o.SetDivision(division)
	return o
}

// SetDivision adds the division to the put division params
func (o *PutDivisionParams) SetDivision(division *models.Division) {
	o.Division = division
}

// WithID adds the id to the put division params
func (o *PutDivisionParams) WithID(id int64) *PutDivisionParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the put division params
func (o *PutDivisionParams) SetID(id int64) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *PutDivisionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Division != nil {
		if err := r.SetBodyParam(o.Division); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
