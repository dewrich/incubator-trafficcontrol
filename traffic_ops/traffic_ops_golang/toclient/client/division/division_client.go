// Code generated by go-swagger; DO NOT EDIT.

package division

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new division API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for division API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteDivision Delete a Division
*/
func (a *Client) DeleteDivision(params *DeleteDivisionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDivisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDivisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDivision",
		Method:             "DELETE",
		PathPattern:        "/divisions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDivisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDivisionOK), nil

}

/*
GetDivisionByID Retrieve a specific Division
*/
func (a *Client) GetDivisionByID(params *GetDivisionByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDivisionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDivisionByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDivisionById",
		Method:             "GET",
		PathPattern:        "/divisions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDivisionByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDivisionByIDOK), nil

}

/*
GetDivisions Retrieve a list of Divisions
*/
func (a *Client) GetDivisions(params *GetDivisionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDivisionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDivisionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDivisions",
		Method:             "GET",
		PathPattern:        "/divisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDivisionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDivisionsOK), nil

}

/*
PostDivision Create a Division
*/
func (a *Client) PostDivision(params *PostDivisionParams, authInfo runtime.ClientAuthInfoWriter) (*PostDivisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDivisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDivision",
		Method:             "POST",
		PathPattern:        "/divisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostDivisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDivisionOK), nil

}

/*
PutDivision Update a Division
*/
func (a *Client) PutDivision(params *PutDivisionParams, authInfo runtime.ClientAuthInfoWriter) (*PutDivisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDivisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDivision",
		Method:             "PUT",
		PathPattern:        "/divisions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutDivisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDivisionOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
