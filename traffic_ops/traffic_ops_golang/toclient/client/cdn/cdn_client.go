// Code generated by go-swagger; DO NOT EDIT.

package cdn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new cdn API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cdn API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteCDN Delete a CDN
*/
func (a *Client) DeleteCDN(params *DeleteCDNParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCDNOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCDNParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCDN",
		Method:             "DELETE",
		PathPattern:        "/cdns/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCDNReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCDNOK), nil

}

/*
GetCDNByID Retrieve a specific CDN
*/
func (a *Client) GetCDNByID(params *GetCDNByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCDNByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCDNByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCDNById",
		Method:             "GET",
		PathPattern:        "/cdns/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCDNByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCDNByIDOK), nil

}

/*
GetCDNs Retrieve a list of CDNs
*/
func (a *Client) GetCDNs(params *GetCDNsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCDNsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCDNsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCDNs",
		Method:             "GET",
		PathPattern:        "/cdns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCDNsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCDNsOK), nil

}

/*
PostCDN Create a CDN
*/
func (a *Client) PostCDN(params *PostCDNParams, authInfo runtime.ClientAuthInfoWriter) (*PostCDNOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCDNParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCDN",
		Method:             "POST",
		PathPattern:        "/cdns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostCDNReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCDNOK), nil

}

/*
PutCDN Update a CDN
*/
func (a *Client) PutCDN(params *PutCDNParams, authInfo runtime.ClientAuthInfoWriter) (*PutCDNOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCDNParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCDN",
		Method:             "PUT",
		PathPattern:        "/cdns/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutCDNReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCDNOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
