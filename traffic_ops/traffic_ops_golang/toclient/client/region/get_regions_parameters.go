// Code generated by go-swagger; DO NOT EDIT.

package region

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRegionsParams creates a new GetRegionsParams object
// with the default values initialized.
func NewGetRegionsParams() *GetRegionsParams {
	var ()
	return &GetRegionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRegionsParamsWithTimeout creates a new GetRegionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRegionsParamsWithTimeout(timeout time.Duration) *GetRegionsParams {
	var ()
	return &GetRegionsParams{

		timeout: timeout,
	}
}

// NewGetRegionsParamsWithContext creates a new GetRegionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRegionsParamsWithContext(ctx context.Context) *GetRegionsParams {
	var ()
	return &GetRegionsParams{

		Context: ctx,
	}
}

// NewGetRegionsParamsWithHTTPClient creates a new GetRegionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRegionsParamsWithHTTPClient(client *http.Client) *GetRegionsParams {
	var ()
	return &GetRegionsParams{
		HTTPClient: client,
	}
}

/*GetRegionsParams contains all the parameters to send to the API endpoint
for the get regions operation typically these are written to a http.Request
*/
type GetRegionsParams struct {

	/*Division
	  Division ID that refers to this Region

	*/
	Division *string
	/*DivisionName
	  Division Name that refers to this Region

	*/
	DivisionName *string
	/*ID
	  Unique identifier for the Region

	*/
	ID *string
	/*Orderby*/
	Orderby *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get regions params
func (o *GetRegionsParams) WithTimeout(timeout time.Duration) *GetRegionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get regions params
func (o *GetRegionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get regions params
func (o *GetRegionsParams) WithContext(ctx context.Context) *GetRegionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get regions params
func (o *GetRegionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get regions params
func (o *GetRegionsParams) WithHTTPClient(client *http.Client) *GetRegionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get regions params
func (o *GetRegionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDivision adds the division to the get regions params
func (o *GetRegionsParams) WithDivision(division *string) *GetRegionsParams {
	o.SetDivision(division)
	return o
}

// SetDivision adds the division to the get regions params
func (o *GetRegionsParams) SetDivision(division *string) {
	o.Division = division
}

// WithDivisionName adds the divisionName to the get regions params
func (o *GetRegionsParams) WithDivisionName(divisionName *string) *GetRegionsParams {
	o.SetDivisionName(divisionName)
	return o
}

// SetDivisionName adds the divisionName to the get regions params
func (o *GetRegionsParams) SetDivisionName(divisionName *string) {
	o.DivisionName = divisionName
}

// WithID adds the id to the get regions params
func (o *GetRegionsParams) WithID(id *string) *GetRegionsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get regions params
func (o *GetRegionsParams) SetID(id *string) {
	o.ID = id
}

// WithOrderby adds the orderby to the get regions params
func (o *GetRegionsParams) WithOrderby(orderby *string) *GetRegionsParams {
	o.SetOrderby(orderby)
	return o
}

// SetOrderby adds the orderby to the get regions params
func (o *GetRegionsParams) SetOrderby(orderby *string) {
	o.Orderby = orderby
}

// WriteToRequest writes these params to a swagger request
func (o *GetRegionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Division != nil {

		// query param division
		var qrDivision string
		if o.Division != nil {
			qrDivision = *o.Division
		}
		qDivision := qrDivision
		if qDivision != "" {
			if err := r.SetQueryParam("division", qDivision); err != nil {
				return err
			}
		}

	}

	if o.DivisionName != nil {

		// query param divisionName
		var qrDivisionName string
		if o.DivisionName != nil {
			qrDivisionName = *o.DivisionName
		}
		qDivisionName := qrDivisionName
		if qDivisionName != "" {
			if err := r.SetQueryParam("divisionName", qDivisionName); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.Orderby != nil {

		// query param orderby
		var qrOrderby string
		if o.Orderby != nil {
			qrOrderby = *o.Orderby
		}
		qOrderby := qrOrderby
		if qOrderby != "" {
			if err := r.SetQueryParam("orderby", qOrderby); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
