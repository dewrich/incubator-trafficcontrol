// Code generated by go-swagger; DO NOT EDIT.

package region

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRegionsParams creates a new GetRegionsParams object
// with the default values initialized.
func NewGetRegionsParams() GetRegionsParams {
	var ()
	return GetRegionsParams{}
}

// GetRegionsParams contains all the bound params for the get regions operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetRegions
type GetRegionsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Division ID that refers to this Region
	  In: query
	*/
	Division *string
	/*Division Name that refers to this Region
	  In: query
	*/
	DivisionName *string
	/*Unique identifier for the Region
	  In: query
	*/
	ID *string
	/*
	  In: query
	*/
	Orderby *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetRegionsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDivision, qhkDivision, _ := qs.GetOK("division")
	if err := o.bindDivision(qDivision, qhkDivision, route.Formats); err != nil {
		res = append(res, err)
	}

	qDivisionName, qhkDivisionName, _ := qs.GetOK("divisionName")
	if err := o.bindDivisionName(qDivisionName, qhkDivisionName, route.Formats); err != nil {
		res = append(res, err)
	}

	qID, qhkID, _ := qs.GetOK("id")
	if err := o.bindID(qID, qhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrderby, qhkOrderby, _ := qs.GetOK("orderby")
	if err := o.bindOrderby(qOrderby, qhkOrderby, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRegionsParams) bindDivision(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Division = &raw

	return nil
}

func (o *GetRegionsParams) bindDivisionName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.DivisionName = &raw

	return nil
}

func (o *GetRegionsParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ID = &raw

	return nil
}

func (o *GetRegionsParams) bindOrderby(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Orderby = &raw

	return nil
}
