// Code generated by go-swagger; DO NOT EDIT.

package asn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/apache/incubator-trafficcontrol.tor-api/traffic_ops/traffic_ops_golang/toserver/models"
)

// GetASNsOKCode is the HTTP code returned for type GetASNsOK
const GetASNsOKCode int = 200

/*GetASNsOK ASNs -  ASNsResponse to get the "response" top level key

swagger:response getASNsOK
*/
type GetASNsOK struct {

	/*
	  In: Body
	*/
	Payload *models.ASNsResponse `json:"body,omitempty"`
}

// NewGetASNsOK creates GetASNsOK with default headers values
func NewGetASNsOK() *GetASNsOK {
	return &GetASNsOK{}
}

// WithPayload adds the payload to the get a s ns o k response
func (o *GetASNsOK) WithPayload(payload *models.ASNsResponse) *GetASNsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get a s ns o k response
func (o *GetASNsOK) SetPayload(payload *models.ASNsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetASNsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetASNsBadRequestCode is the HTTP code returned for type GetASNsBadRequest
const GetASNsBadRequestCode int = 400

/*GetASNsBadRequest Alerts - informs the client of server side messages

swagger:response getASNsBadRequest
*/
type GetASNsBadRequest struct {

	/*
	  In: Body
	*/
	Payload models.GetASNsBadRequestBody `json:"body,omitempty"`
}

// NewGetASNsBadRequest creates GetASNsBadRequest with default headers values
func NewGetASNsBadRequest() *GetASNsBadRequest {
	return &GetASNsBadRequest{}
}

// WithPayload adds the payload to the get a s ns bad request response
func (o *GetASNsBadRequest) WithPayload(payload models.GetASNsBadRequestBody) *GetASNsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get a s ns bad request response
func (o *GetASNsBadRequest) SetPayload(payload models.GetASNsBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetASNsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if payload == nil {
		payload = make(models.GetASNsBadRequestBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
