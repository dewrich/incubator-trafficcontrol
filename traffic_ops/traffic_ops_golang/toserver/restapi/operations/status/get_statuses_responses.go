// Code generated by go-swagger; DO NOT EDIT.

package status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/apache/incubator-trafficcontrol.tor-api/traffic_ops/traffic_ops_golang/toserver/models"
)

// GetStatusesOKCode is the HTTP code returned for type GetStatusesOK
const GetStatusesOKCode int = 200

/*GetStatusesOK Statuses -  StatusesResponse to get the "response" top level key

swagger:response getStatusesOK
*/
type GetStatusesOK struct {

	/*
	  In: Body
	*/
	Payload *models.StatusesResponse `json:"body,omitempty"`
}

// NewGetStatusesOK creates GetStatusesOK with default headers values
func NewGetStatusesOK() *GetStatusesOK {
	return &GetStatusesOK{}
}

// WithPayload adds the payload to the get statuses o k response
func (o *GetStatusesOK) WithPayload(payload *models.StatusesResponse) *GetStatusesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get statuses o k response
func (o *GetStatusesOK) SetPayload(payload *models.StatusesResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetStatusesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetStatusesBadRequestCode is the HTTP code returned for type GetStatusesBadRequest
const GetStatusesBadRequestCode int = 400

/*GetStatusesBadRequest Alerts - informs the client of server side messages

swagger:response getStatusesBadRequest
*/
type GetStatusesBadRequest struct {

	/*
	  In: Body
	*/
	Payload models.GetStatusesBadRequestBody `json:"body,omitempty"`
}

// NewGetStatusesBadRequest creates GetStatusesBadRequest with default headers values
func NewGetStatusesBadRequest() *GetStatusesBadRequest {
	return &GetStatusesBadRequest{}
}

// WithPayload adds the payload to the get statuses bad request response
func (o *GetStatusesBadRequest) WithPayload(payload models.GetStatusesBadRequestBody) *GetStatusesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get statuses bad request response
func (o *GetStatusesBadRequest) SetPayload(payload models.GetStatusesBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetStatusesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if payload == nil {
		payload = make(models.GetStatusesBadRequestBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
