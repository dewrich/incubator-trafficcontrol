// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Alert Alerts that inform the client of server side information
// swagger:model Alert
type Alert struct {

	// Severity
	Level string `json:"level,omitempty"`

	// Message
	Text string `json:"text,omitempty"`
}

// Validate validates this alert
func (m *Alert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLevel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var alertTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["[\"success\""," \"info\""," \"warn\""," \"error\"]"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertTypeLevelPropEnum = append(alertTypeLevelPropEnum, v)
	}
}

const (
	// AlertLevelSuccess captures enum value "[\"success\""
	AlertLevelSuccess string = "[\"success\""
	// AlertLevelNrInfo captures enum value " \"info\""
	AlertLevelNrInfo string = " \"info\""
	// AlertLevelNrWarn captures enum value " \"warn\""
	AlertLevelNrWarn string = " \"warn\""
	// AlertLevelNrError captures enum value " \"error\"]"
	AlertLevelNrError string = " \"error\"]"
)

// prop value enum
func (m *Alert) validateLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, alertTypeLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Alert) validateLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.Level) { // not required
		return nil
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Alert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Alert) UnmarshalBinary(b []byte) error {
	var res Alert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
