// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Region region
// swagger:model Region
type Region struct {

	// DivisionName of the Division
	// Required: true
	Division *int64 `json:"division"`

	// DivisionName - Name of the Division associated to this Region
	// Required: true
	DivisionName *string `json:"divisionName"`

	// Region ID
	ID int64 `json:"id,omitempty"`

	// last updated
	LastUpdated string `json:"lastUpdated,omitempty"`

	// Region Name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this region
func (m *Region) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDivision(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDivisionName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Region) validateDivision(formats strfmt.Registry) error {

	if err := validate.Required("division", "body", m.Division); err != nil {
		return err
	}

	return nil
}

func (m *Region) validateDivisionName(formats strfmt.Registry) error {

	if err := validate.Required("divisionName", "body", m.DivisionName); err != nil {
		return err
	}

	return nil
}

func (m *Region) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Region) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Region) UnmarshalBinary(b []byte) error {
	var res Region
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
